.\" Copyright (C) 2024-2025 SUSE LLC <petr.pavlu@suse.com>
.\" SPDX-License-Identifier: GPL-2.0-or-later
.TH SUSE-KABI-TOOLS 5
.SH NAME
suse-kabi-tools \- Linux-kernel ABI definition files
.SH DESCRIPTION
suse-kabi-tools operate on several data formats: symbol versions (symvers), symbol types (symtypes),
consolidated symtypes, and kABI severity rules.
.PP
The symvers and symtypes data files are generated by the Linux kernel build, and their format is
effectively defined by the Linux project. The consolidated symtypes and kABI severity rules are
custom formats defined specifically by suse-kabi-tools.
.PP
This document describes these formats.
.SH SYMBOL VERSIONS
TODO Describe the format.
.SH SYMBOL TYPES
.SS DESCRIPTION
Symtypes files provide information about Application Binary Interface (ABI) in the Linux kernel. The
\fBksymtypes\fR utility recognizes two variants of this format, the base and its own consolidated
variant.
.PP
The base format describes exported functions, variables and their dependent types as known in a
single object file. The data is generated by \fBgenksyms\fR utilities from the kernel tree.
.PP
The consolidated format extends the base format to efficiently describe types across multiple object
files. This allows to have one file for the entire kernel ABI. The format is generated by the
\fBksymtypes\fR \fBconsolidate\fR command.
.SS BASE FORMAT
A symtypes file consists of type records, one per a line. Each record is comprised of a type
identifier and an associated type description, separated by a whitespace.
.PP
A type identifier can be one of the following:
.RS
.IP \[bu] 2
<exported-name> \(en an exported function or variable definition (no prefix),
.IP \[bu] 2
t#<typedef-name> \(en a typedef definition,
.IP \[bu] 2
e#<enum-name> \(en an enumeration definition,
.IP \[bu] 2
s#<struct-name> \(en a structure definition,
.IP \[bu] 2
u#<union-name> \(en a union definition,
.IP \[bu] 2
E#<enum-constant-name> \(en an enumerator definition.
.PP
.RE
A type description consists of a list of tokens, separated by a whitespace. A single token can be
a literal value directly contributing to the type definition or a type reference.
References are in the form "<x>#<type-name>" and point to another type defined in the file.
.PP
A type name can be optionally enclosed in single quotes, both when when definiting the type and when
referencing it. This allows the type name to contain spaces.
.PP
.SS CONSOLIDATED FORMAT
TODO Update the description to reflect the current format.
The consolidated format extends the base format with variant suffixes and file records.
.PP
Each type definition can have additionally a suffix in the form "@<variant>". This allows to have
different definitions of the same type in the consolidated file.
.PP
A file record is identified by "F#<file-name>". Its description lists types and exports found in
a given file. The types must include their variant if multiple definitions of a specific type are
present in the consolidated file.
A type that has only one variant in the entire consolidated file can be omitted on the file record
to save space. Its presence can be implicitly determined
by recursively walking all exports in the specific file.
.PP
Type references found in other records do not use the variant suffix. An actual type must be
determined based on the context in what file the reference is made.
.PP
.SS EXAMPLES
The following example shows two files \fIa.symtypes\fR and \fI.b.symtypes\fR using the base format.
The first file \fIa.symtypes\fR records an export of the function "baz" that takes as its parameters
the structure "foo" and a pointer to the union "bar", with both types having a full definition. The
second file \fIb.symtypes\fR records an export of the function "qux" that takes as its parameters
the structure "foo" and a pointer to the union "bar", with the former having a full definition and
the latter being an opaque declaration.
.IP
.EX
$ cat example/a.symtypes
s#foo struct foo { int m ; }
u#bar union bar { int i; float f; }
baz void baz ( s#foo a1 , u#bar * a2 )
.EE
.PP
.IP
.EX
$ cat example/b.symtypes
s#foo struct foo { int m ; }
u#bar union bar { UNKNOWN }
qux void qux ( s#foo a1 , u#bar * a2 )
.EE
.PP
The following example shows file \fIc.symtypes\fR that is produced by consolidating the previous two
files \fIa.symtypes\fR and \fIb.symtypes\fR. The structure type "foo" which was same in both file is
merged, the union type "bar" appears in two different variants. New "F#" records indicate which
types are specific to each file.
.IP
.EX
$ ksymtypes consolidate --output=example/c.kabi example/
$ cat example/c.kabi
s#foo struct foo { int m ; }
u#bar@0 union bar { int i; float f; }
u#bar@1 union bar { UNKNOWN }
baz void baz ( s#foo a1 , u#bar * a2 )
qux void qux ( s#foo a1 , u#bar * a2 )
F#example/a.symtypes u#bar@0 baz
F#example/b.symtypes u#bar@1 qux
.EE
.SH KABI SEVERITY RULES
TODO Describe the format.
.SH SEE ALSO
\fBksymtypes\fR(1)
